# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from e2e_hpc/CustomMsg_RSSI.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CustomMsg_RSSI(genpy.Message):
  _md5sum = "278cca35bf3f379767e0057dde46377c"
  _type = "e2e_hpc/CustomMsg_RSSI"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 pdoa1
uint64 tof1
float64 rssi1
float64 pdoa2
uint64 tof2
float64 rssi2"""
  __slots__ = ['pdoa1','tof1','rssi1','pdoa2','tof2','rssi2']
  _slot_types = ['float64','uint64','float64','float64','uint64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pdoa1,tof1,rssi1,pdoa2,tof2,rssi2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CustomMsg_RSSI, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pdoa1 is None:
        self.pdoa1 = 0.
      if self.tof1 is None:
        self.tof1 = 0
      if self.rssi1 is None:
        self.rssi1 = 0.
      if self.pdoa2 is None:
        self.pdoa2 = 0.
      if self.tof2 is None:
        self.tof2 = 0
      if self.rssi2 is None:
        self.rssi2 = 0.
    else:
      self.pdoa1 = 0.
      self.tof1 = 0
      self.rssi1 = 0.
      self.pdoa2 = 0.
      self.tof2 = 0
      self.rssi2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dQ2dQd().pack(_x.pdoa1, _x.tof1, _x.rssi1, _x.pdoa2, _x.tof2, _x.rssi2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.pdoa1, _x.tof1, _x.rssi1, _x.pdoa2, _x.tof2, _x.rssi2,) = _get_struct_dQ2dQd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dQ2dQd().pack(_x.pdoa1, _x.tof1, _x.rssi1, _x.pdoa2, _x.tof2, _x.rssi2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.pdoa1, _x.tof1, _x.rssi1, _x.pdoa2, _x.tof2, _x.rssi2,) = _get_struct_dQ2dQd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dQ2dQd = None
def _get_struct_dQ2dQd():
    global _struct_dQ2dQd
    if _struct_dQ2dQd is None:
        _struct_dQ2dQd = struct.Struct("<dQ2dQd")
    return _struct_dQ2dQd
