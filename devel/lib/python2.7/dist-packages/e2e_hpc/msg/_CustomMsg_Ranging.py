# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from e2e_hpc/CustomMsg_Ranging.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CustomMsg_Ranging(genpy.Message):
  _md5sum = "7d0e3001a21853e4431bd85b875d239e"
  _type = "e2e_hpc/CustomMsg_Ranging"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string ble_status
uint64 anchor_system_time
uint64 anchor_received_time
float64 firstPath_power
float64 aoa
float64 distance
uint64 hpc_system_time
"""
  __slots__ = ['ble_status','anchor_system_time','anchor_received_time','firstPath_power','aoa','distance','hpc_system_time']
  _slot_types = ['string','uint64','uint64','float64','float64','float64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ble_status,anchor_system_time,anchor_received_time,firstPath_power,aoa,distance,hpc_system_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CustomMsg_Ranging, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ble_status is None:
        self.ble_status = ''
      if self.anchor_system_time is None:
        self.anchor_system_time = 0
      if self.anchor_received_time is None:
        self.anchor_received_time = 0
      if self.firstPath_power is None:
        self.firstPath_power = 0.
      if self.aoa is None:
        self.aoa = 0.
      if self.distance is None:
        self.distance = 0.
      if self.hpc_system_time is None:
        self.hpc_system_time = 0
    else:
      self.ble_status = ''
      self.anchor_system_time = 0
      self.anchor_received_time = 0
      self.firstPath_power = 0.
      self.aoa = 0.
      self.distance = 0.
      self.hpc_system_time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ble_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3dQ().pack(_x.anchor_system_time, _x.anchor_received_time, _x.firstPath_power, _x.aoa, _x.distance, _x.hpc_system_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ble_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ble_status = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.anchor_system_time, _x.anchor_received_time, _x.firstPath_power, _x.aoa, _x.distance, _x.hpc_system_time,) = _get_struct_2Q3dQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ble_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3dQ().pack(_x.anchor_system_time, _x.anchor_received_time, _x.firstPath_power, _x.aoa, _x.distance, _x.hpc_system_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ble_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ble_status = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.anchor_system_time, _x.anchor_received_time, _x.firstPath_power, _x.aoa, _x.distance, _x.hpc_system_time,) = _get_struct_2Q3dQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q3dQ = None
def _get_struct_2Q3dQ():
    global _struct_2Q3dQ
    if _struct_2Q3dQ is None:
        _struct_2Q3dQ = struct.Struct("<2Q3dQ")
    return _struct_2Q3dQ
