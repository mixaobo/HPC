// Generated by gencpp from file e2e_hpc/CustomMsg_RSSI.msg
// DO NOT EDIT!


#ifndef E2E_HPC_MESSAGE_CUSTOMMSG_RSSI_H
#define E2E_HPC_MESSAGE_CUSTOMMSG_RSSI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace e2e_hpc
{
template <class ContainerAllocator>
struct CustomMsg_RSSI_
{
  typedef CustomMsg_RSSI_<ContainerAllocator> Type;

  CustomMsg_RSSI_()
    : pdoa1(0.0)
    , tof1(0)
    , rssi1(0.0)
    , pdoa2(0.0)
    , tof2(0)
    , rssi2(0.0)  {
    }
  CustomMsg_RSSI_(const ContainerAllocator& _alloc)
    : pdoa1(0.0)
    , tof1(0)
    , rssi1(0.0)
    , pdoa2(0.0)
    , tof2(0)
    , rssi2(0.0)  {
  (void)_alloc;
    }



   typedef double _pdoa1_type;
  _pdoa1_type pdoa1;

   typedef uint64_t _tof1_type;
  _tof1_type tof1;

   typedef double _rssi1_type;
  _rssi1_type rssi1;

   typedef double _pdoa2_type;
  _pdoa2_type pdoa2;

   typedef uint64_t _tof2_type;
  _tof2_type tof2;

   typedef double _rssi2_type;
  _rssi2_type rssi2;





  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> const> ConstPtr;

}; // struct CustomMsg_RSSI_

typedef ::e2e_hpc::CustomMsg_RSSI_<std::allocator<void> > CustomMsg_RSSI;

typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_RSSI > CustomMsg_RSSIPtr;
typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_RSSI const> CustomMsg_RSSIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator2> & rhs)
{
  return lhs.pdoa1 == rhs.pdoa1 &&
    lhs.tof1 == rhs.tof1 &&
    lhs.rssi1 == rhs.rssi1 &&
    lhs.pdoa2 == rhs.pdoa2 &&
    lhs.tof2 == rhs.tof2 &&
    lhs.rssi2 == rhs.rssi2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e2e_hpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "278cca35bf3f379767e0057dde46377c";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x278cca35bf3f3797ULL;
  static const uint64_t static_value2 = 0x67e0057dde46377cULL;
};

template<class ContainerAllocator>
struct DataType< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e_hpc/CustomMsg_RSSI";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pdoa1\n"
"uint64 tof1\n"
"float64 rssi1\n"
"float64 pdoa2\n"
"uint64 tof2\n"
"float64 rssi2\n"
;
  }

  static const char* value(const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pdoa1);
      stream.next(m.tof1);
      stream.next(m.rssi1);
      stream.next(m.pdoa2);
      stream.next(m.tof2);
      stream.next(m.rssi2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomMsg_RSSI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e2e_hpc::CustomMsg_RSSI_<ContainerAllocator>& v)
  {
    s << indent << "pdoa1: ";
    Printer<double>::stream(s, indent + "  ", v.pdoa1);
    s << indent << "tof1: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tof1);
    s << indent << "rssi1: ";
    Printer<double>::stream(s, indent + "  ", v.rssi1);
    s << indent << "pdoa2: ";
    Printer<double>::stream(s, indent + "  ", v.pdoa2);
    s << indent << "tof2: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tof2);
    s << indent << "rssi2: ";
    Printer<double>::stream(s, indent + "  ", v.rssi2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E2E_HPC_MESSAGE_CUSTOMMSG_RSSI_H
