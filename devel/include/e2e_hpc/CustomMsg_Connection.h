// Generated by gencpp from file e2e_hpc/CustomMsg_Connection.msg
// DO NOT EDIT!


#ifndef E2E_HPC_MESSAGE_CUSTOMMSG_CONNECTION_H
#define E2E_HPC_MESSAGE_CUSTOMMSG_CONNECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace e2e_hpc
{
template <class ContainerAllocator>
struct CustomMsg_Connection_
{
  typedef CustomMsg_Connection_<ContainerAllocator> Type;

  CustomMsg_Connection_()
    : veh_status()
    , ble_status()
    , uwb_status()  {
    }
  CustomMsg_Connection_(const ContainerAllocator& _alloc)
    : veh_status(_alloc)
    , ble_status(_alloc)
    , uwb_status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _veh_status_type;
  _veh_status_type veh_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ble_status_type;
  _ble_status_type ble_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uwb_status_type;
  _uwb_status_type uwb_status;





  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> const> ConstPtr;

}; // struct CustomMsg_Connection_

typedef ::e2e_hpc::CustomMsg_Connection_<std::allocator<void> > CustomMsg_Connection;

typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Connection > CustomMsg_ConnectionPtr;
typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Connection const> CustomMsg_ConnectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator2> & rhs)
{
  return lhs.veh_status == rhs.veh_status &&
    lhs.ble_status == rhs.ble_status &&
    lhs.uwb_status == rhs.uwb_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e2e_hpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f9943c60f33233e9a2efcc308c36232";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f9943c60f33233eULL;
  static const uint64_t static_value2 = 0x9a2efcc308c36232ULL;
};

template<class ContainerAllocator>
struct DataType< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e_hpc/CustomMsg_Connection";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string veh_status\n"
"string ble_status\n"
"string uwb_status\n"
;
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.veh_status);
      stream.next(m.ble_status);
      stream.next(m.uwb_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomMsg_Connection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e2e_hpc::CustomMsg_Connection_<ContainerAllocator>& v)
  {
    s << indent << "veh_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.veh_status);
    s << indent << "ble_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ble_status);
    s << indent << "uwb_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uwb_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E2E_HPC_MESSAGE_CUSTOMMSG_CONNECTION_H
