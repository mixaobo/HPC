// Generated by gencpp from file e2e_hpc/CustomMsg_Door.msg
// DO NOT EDIT!


#ifndef E2E_HPC_MESSAGE_CUSTOMMSG_DOOR_H
#define E2E_HPC_MESSAGE_CUSTOMMSG_DOOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace e2e_hpc
{
template <class ContainerAllocator>
struct CustomMsg_Door_
{
  typedef CustomMsg_Door_<ContainerAllocator> Type;

  CustomMsg_Door_()
    : FrontLeft()
    , FrontRight()
    , RearLeft()
    , RearRight()
    , Trunk()  {
    }
  CustomMsg_Door_(const ContainerAllocator& _alloc)
    : FrontLeft(_alloc)
    , FrontRight(_alloc)
    , RearLeft(_alloc)
    , RearRight(_alloc)
    , Trunk(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _FrontLeft_type;
  _FrontLeft_type FrontLeft;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _FrontRight_type;
  _FrontRight_type FrontRight;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _RearLeft_type;
  _RearLeft_type RearLeft;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _RearRight_type;
  _RearRight_type RearRight;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _Trunk_type;
  _Trunk_type Trunk;





  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> const> ConstPtr;

}; // struct CustomMsg_Door_

typedef ::e2e_hpc::CustomMsg_Door_<std::allocator<void> > CustomMsg_Door;

typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Door > CustomMsg_DoorPtr;
typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Door const> CustomMsg_DoorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator2> & rhs)
{
  return lhs.FrontLeft == rhs.FrontLeft &&
    lhs.FrontRight == rhs.FrontRight &&
    lhs.RearLeft == rhs.RearLeft &&
    lhs.RearRight == rhs.RearRight &&
    lhs.Trunk == rhs.Trunk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e2e_hpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60ef31f79c819e28a0085a08d8ae1c89";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60ef31f79c819e28ULL;
  static const uint64_t static_value2 = 0xa0085a08d8ae1c89ULL;
};

template<class ContainerAllocator>
struct DataType< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e_hpc/CustomMsg_Door";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] FrontLeft   \n"
"string[] FrontRight   \n"
"string[] RearLeft     \n"
"string[] RearRight    \n"
"string[] Trunk        \n"
;
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FrontLeft);
      stream.next(m.FrontRight);
      stream.next(m.RearLeft);
      stream.next(m.RearRight);
      stream.next(m.Trunk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomMsg_Door_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e2e_hpc::CustomMsg_Door_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e2e_hpc::CustomMsg_Door_<ContainerAllocator>& v)
  {
    s << indent << "FrontLeft[]" << std::endl;
    for (size_t i = 0; i < v.FrontLeft.size(); ++i)
    {
      s << indent << "  FrontLeft[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.FrontLeft[i]);
    }
    s << indent << "FrontRight[]" << std::endl;
    for (size_t i = 0; i < v.FrontRight.size(); ++i)
    {
      s << indent << "  FrontRight[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.FrontRight[i]);
    }
    s << indent << "RearLeft[]" << std::endl;
    for (size_t i = 0; i < v.RearLeft.size(); ++i)
    {
      s << indent << "  RearLeft[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.RearLeft[i]);
    }
    s << indent << "RearRight[]" << std::endl;
    for (size_t i = 0; i < v.RearRight.size(); ++i)
    {
      s << indent << "  RearRight[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.RearRight[i]);
    }
    s << indent << "Trunk[]" << std::endl;
    for (size_t i = 0; i < v.Trunk.size(); ++i)
    {
      s << indent << "  Trunk[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Trunk[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // E2E_HPC_MESSAGE_CUSTOMMSG_DOOR_H
