// Generated by gencpp from file e2e_hpc/DisAoaResponse.msg
// DO NOT EDIT!


#ifndef E2E_HPC_MESSAGE_DISAOARESPONSE_H
#define E2E_HPC_MESSAGE_DISAOARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace e2e_hpc
{
template <class ContainerAllocator>
struct DisAoaResponse_
{
  typedef DisAoaResponse_<ContainerAllocator> Type;

  DisAoaResponse_()
    : returnvalue(0)  {
    }
  DisAoaResponse_(const ContainerAllocator& _alloc)
    : returnvalue(0)  {
  (void)_alloc;
    }



   typedef int8_t _returnvalue_type;
  _returnvalue_type returnvalue;





  typedef boost::shared_ptr< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DisAoaResponse_

typedef ::e2e_hpc::DisAoaResponse_<std::allocator<void> > DisAoaResponse;

typedef boost::shared_ptr< ::e2e_hpc::DisAoaResponse > DisAoaResponsePtr;
typedef boost::shared_ptr< ::e2e_hpc::DisAoaResponse const> DisAoaResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e2e_hpc::DisAoaResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e2e_hpc::DisAoaResponse_<ContainerAllocator1> & lhs, const ::e2e_hpc::DisAoaResponse_<ContainerAllocator2> & rhs)
{
  return lhs.returnvalue == rhs.returnvalue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e2e_hpc::DisAoaResponse_<ContainerAllocator1> & lhs, const ::e2e_hpc::DisAoaResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e2e_hpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1bee4b175fffcd9e09dc7bc8dbfef82";
  }

  static const char* value(const ::e2e_hpc::DisAoaResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1bee4b175fffcd9ULL;
  static const uint64_t static_value2 = 0xe09dc7bc8dbfef82ULL;
};

template<class ContainerAllocator>
struct DataType< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e_hpc/DisAoaResponse";
  }

  static const char* value(const ::e2e_hpc::DisAoaResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int8 returnvalue\n"
"\n"
;
  }

  static const char* value(const ::e2e_hpc::DisAoaResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.returnvalue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DisAoaResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e2e_hpc::DisAoaResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e2e_hpc::DisAoaResponse_<ContainerAllocator>& v)
  {
    s << indent << "returnvalue: ";
    Printer<int8_t>::stream(s, indent + "  ", v.returnvalue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E2E_HPC_MESSAGE_DISAOARESPONSE_H
