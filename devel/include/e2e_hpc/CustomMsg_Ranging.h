// Generated by gencpp from file e2e_hpc/CustomMsg_Ranging.msg
// DO NOT EDIT!


#ifndef E2E_HPC_MESSAGE_CUSTOMMSG_RANGING_H
#define E2E_HPC_MESSAGE_CUSTOMMSG_RANGING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace e2e_hpc
{
template <class ContainerAllocator>
struct CustomMsg_Ranging_
{
  typedef CustomMsg_Ranging_<ContainerAllocator> Type;

  CustomMsg_Ranging_()
    : ble_status()
    , anchor_system_time(0)
    , anchor_received_time(0)
    , firstPath_power(0.0)
    , aoa(0.0)
    , distance(0.0)
    , hpc_system_time(0)  {
    }
  CustomMsg_Ranging_(const ContainerAllocator& _alloc)
    : ble_status(_alloc)
    , anchor_system_time(0)
    , anchor_received_time(0)
    , firstPath_power(0.0)
    , aoa(0.0)
    , distance(0.0)
    , hpc_system_time(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ble_status_type;
  _ble_status_type ble_status;

   typedef uint64_t _anchor_system_time_type;
  _anchor_system_time_type anchor_system_time;

   typedef uint64_t _anchor_received_time_type;
  _anchor_received_time_type anchor_received_time;

   typedef double _firstPath_power_type;
  _firstPath_power_type firstPath_power;

   typedef double _aoa_type;
  _aoa_type aoa;

   typedef double _distance_type;
  _distance_type distance;

   typedef uint64_t _hpc_system_time_type;
  _hpc_system_time_type hpc_system_time;





  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> const> ConstPtr;

}; // struct CustomMsg_Ranging_

typedef ::e2e_hpc::CustomMsg_Ranging_<std::allocator<void> > CustomMsg_Ranging;

typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Ranging > CustomMsg_RangingPtr;
typedef boost::shared_ptr< ::e2e_hpc::CustomMsg_Ranging const> CustomMsg_RangingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator2> & rhs)
{
  return lhs.ble_status == rhs.ble_status &&
    lhs.anchor_system_time == rhs.anchor_system_time &&
    lhs.anchor_received_time == rhs.anchor_received_time &&
    lhs.firstPath_power == rhs.firstPath_power &&
    lhs.aoa == rhs.aoa &&
    lhs.distance == rhs.distance &&
    lhs.hpc_system_time == rhs.hpc_system_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator1> & lhs, const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e2e_hpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d0e3001a21853e4431bd85b875d239e";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d0e3001a21853e4ULL;
  static const uint64_t static_value2 = 0x431bd85b875d239eULL;
};

template<class ContainerAllocator>
struct DataType< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e_hpc/CustomMsg_Ranging";
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ble_status\n"
"uint64 anchor_system_time\n"
"uint64 anchor_received_time\n"
"float64 firstPath_power\n"
"float64 aoa\n"
"float64 distance\n"
"uint64 hpc_system_time\n"
;
  }

  static const char* value(const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ble_status);
      stream.next(m.anchor_system_time);
      stream.next(m.anchor_received_time);
      stream.next(m.firstPath_power);
      stream.next(m.aoa);
      stream.next(m.distance);
      stream.next(m.hpc_system_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomMsg_Ranging_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e2e_hpc::CustomMsg_Ranging_<ContainerAllocator>& v)
  {
    s << indent << "ble_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ble_status);
    s << indent << "anchor_system_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.anchor_system_time);
    s << indent << "anchor_received_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.anchor_received_time);
    s << indent << "firstPath_power: ";
    Printer<double>::stream(s, indent + "  ", v.firstPath_power);
    s << indent << "aoa: ";
    Printer<double>::stream(s, indent + "  ", v.aoa);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "hpc_system_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.hpc_system_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E2E_HPC_MESSAGE_CUSTOMMSG_RANGING_H
